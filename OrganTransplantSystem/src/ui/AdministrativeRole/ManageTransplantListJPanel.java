/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.AdministrativeRole;
import DatabaseConn.DatabaseConnection;
import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import model.HospitalManagement.TransplantCase;
import model.HospitalManagement.TransplantCaseDirectory;
import ui.HospitalManagement.ViewTransplantCaseJPanel;

/**
 *
 * @author pranavb
 */
public class ManageTransplantListJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageTransplantListJPanel
     */
    
    JPanel userProcessContainer;
    TransplantCaseDirectory transplantCaseDirectory = new TransplantCaseDirectory();
    public ManageTransplantListJPanel(JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.populateTransplantCasesTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransplantList = new javax.swing.JTable();
        jTextField15 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnNewCasesOnly = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnApproveCase = new javax.swing.JButton();

        setBackground(new java.awt.Color(22, 29, 29));
        setMaximumSize(new java.awt.Dimension(1200, 830));
        setMinimumSize(new java.awt.Dimension(1200, 830));

        tblTransplantList.setBackground(new java.awt.Color(110, 146, 147));
        tblTransplantList.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tblTransplantList.setForeground(new java.awt.Color(255, 255, 255));
        tblTransplantList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient Name", "Organ Name", "Approval Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTransplantList.setRowHeight(20);
        tblTransplantList.setSelectionBackground(new java.awt.Color(22, 29, 29));
        jScrollPane1.setViewportView(tblTransplantList);
        if (tblTransplantList.getColumnModel().getColumnCount() > 0) {
            tblTransplantList.getColumnModel().getColumn(0).setResizable(false);
            tblTransplantList.getColumnModel().getColumn(1).setResizable(false);
            tblTransplantList.getColumnModel().getColumn(2).setResizable(false);
        }

        jTextField15.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jTextField15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField15.setText("TRANSPLANT LIST");

        jButton1.setText("VIEW CASE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnNewCasesOnly.setText("SHOW ONLY NEW CASES");
        btnNewCasesOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCasesOnlyActionPerformed(evt);
            }
        });

        jButton3.setText("REMOVE CASE");

        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnApproveCase.setText("APPROVE CASE");
        btnApproveCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveCaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField15)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNewCasesOnly, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnApproveCase)))
                .addGap(30, 30, 30))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnApproveCase, jButton3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnApproveCase, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnNewCasesOnly, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(337, 337, 337))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnApproveCase, jButton3});

    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                        int selectedRowIndex = tblTransplantList.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
       TransplantCase transplantCase = (TransplantCase) tblTransplantList.getValueAt(selectedRowIndex, 0);
        
        ViewTransplantCaseJPanel viewTransplantCaseJPanel = new ViewTransplantCaseJPanel(this.userProcessContainer, transplantCase.getPatientID().toString());
        userProcessContainer.add("ViewTransplantCaseJPanel", viewTransplantCaseJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnNewCasesOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCasesOnlyActionPerformed
        // TODO add your handling code here:


    
    if (btnNewCasesOnly.getText() == "SHOW ALL CASES"){
        btnNewCasesOnly.setText("SHOW ONLY NEW CASES");
        this.populateTransplantCasesTable();
        return;
    }

    this.transplantCaseDirectory = new TransplantCaseDirectory();
    DefaultTableModel model = (DefaultTableModel) tblTransplantList.getModel();
    model.setRowCount(0);

    try {
        DatabaseConnection databaseConnection = new DatabaseConnection();
        Connection connection = databaseConnection.getConnection();
        String query = "SELECT * FROM transplantPatients where ApprovalStatus = 'Under Review'";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        ResultSet resultSet = preparedStatement.executeQuery();

        while (resultSet.next()) {
            TransplantCase transplantCase = new TransplantCase();
            transplantCase.setPatientID(resultSet.getString("PatientID"));
            transplantCase.setPatientName(resultSet.getString("PatientName"));
            transplantCase.setDateOfBirth(resultSet.getDate("DateOfBirth").toString());
            transplantCase.setScanImage(resultSet.getBytes("ScanImage"));
            transplantCase.setPatientInfo(resultSet.getString("PatientInfo"));
            transplantCase.setRequiredTransplant(resultSet.getString("RequiredTransplant"));
            transplantCase.setApprovalStatus(resultSet.getString("ApprovalStatus"));
            transplantCaseDirectory.addNewCase(transplantCase);
        }

        for (TransplantCase transplantCase : transplantCaseDirectory.getTransplantCases()) {
            Object[] row = new Object[3];
            row[0] = transplantCase;
            row[1] = transplantCase.getRequiredTransplant();
            row[2] = transplantCase.getApprovalStatus();
            model.insertRow(model.getRowCount(), row);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading transplant cases: " + e.getMessage());
    }

            btnNewCasesOnly.setText("SHOW ALL CASES");
    }//GEN-LAST:event_btnNewCasesOnlyActionPerformed

    private void btnApproveCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveCaseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransplantList.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a case to approve.");
        return;
    }

    TransplantCase selectedCase = (TransplantCase) tblTransplantList.getValueAt(selectedRow, 0);
    String patientID = selectedCase.getPatientID();

    try {
        DatabaseConnection databaseConnection = new DatabaseConnection();
        Connection connection = databaseConnection.getConnection();

        String updateQuery = "UPDATE transplantPatients SET ApprovalStatus = 'Approved' WHERE PatientID = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
        preparedStatement.setString(1, patientID);

        int rowsUpdated = preparedStatement.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Case approved successfully!");
            selectedCase.setApprovalStatus("Approved");
            populateTransplantCasesTable();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to approve the case.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating approval status: " + e.getMessage());
    }
    this.transplantCaseDirectory = new TransplantCaseDirectory();
    this.populateTransplantCasesTable();
    }//GEN-LAST:event_btnApproveCaseActionPerformed

    private void populateTransplantCasesTable() {

    DefaultTableModel model = (DefaultTableModel) tblTransplantList.getModel();
    model.setRowCount(0);

    try {
        DatabaseConnection databaseConnection = new DatabaseConnection();
        Connection connection = databaseConnection.getConnection();
        String query = "SELECT * FROM transplantPatients";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
        ResultSet resultSet = preparedStatement.executeQuery();

        while (resultSet.next()) {
            TransplantCase transplantCase = new TransplantCase();
            transplantCase.setPatientID(resultSet.getString("PatientID"));
            transplantCase.setPatientName(resultSet.getString("PatientName"));
            transplantCase.setDateOfBirth(resultSet.getDate("DateOfBirth").toString());
            transplantCase.setScanImage(resultSet.getBytes("ScanImage"));
            transplantCase.setPatientInfo(resultSet.getString("PatientInfo"));
            transplantCase.setRequiredTransplant(resultSet.getString("RequiredTransplant"));
            transplantCase.setApprovalStatus(resultSet.getString("ApprovalStatus"));
            transplantCaseDirectory.addNewCase(transplantCase);
        }

        for (TransplantCase transplantCase : transplantCaseDirectory.getTransplantCases()) {
            Object[] row = new Object[3];
            row[0] = transplantCase;
            row[1] = transplantCase.getRequiredTransplant().toUpperCase();
            row[2] = transplantCase.getApprovalStatus().toUpperCase();
            model.insertRow(model.getRowCount(), row);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading transplant cases: " + e.getMessage());
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproveCase;
    private javax.swing.JButton btnNewCasesOnly;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTable tblTransplantList;
    // End of variables declaration//GEN-END:variables
}
