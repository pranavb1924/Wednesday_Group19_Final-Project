/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.AdministrativeRole;
import DatabaseConn.DatabaseConnection;
import java.awt.CardLayout;
import java.sql.*;
import model.donor.DonorRegistrationRequest;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.HospitalManagement.Hospital;
import model.donor.*;
import model.users.*;
/**
 *
 * @author pranavb
 */
public class DonorRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DonorRequestJPanel
     */
    DatabaseConnection dbconnection = new DatabaseConnection();
    ArrayList<DonorRegistrationRequest> donorRequestDirectory = new ArrayList<DonorRegistrationRequest>();
    JPanel userProcessContainer;
    Donor donor = new Donor();
    Connection connection;
    User user;
    public DonorRequestJPanel(JPanel userProcessContainer, User user) {
        initComponents();
                this.userProcessContainer = userProcessContainer;
        this.connection = dbconnection.getConnection();
        this.fetchDonorRequests();
        this.populateHospitalTable();
        this.user = user;

    }
    
    public void fetchDonorRequests() {
    String query = "SELECT RequestID, FirstName, MiddleName, LastName, DateOfBirth, " +
                   "AddressLine2, City, RequestDate, BloodType, State, ZIP, Phone, RegistrationApproved FROM DonorRegistrationRequests";

    try {
        PreparedStatement stmt = this.connection.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        donorRequestDirectory.clear();

        while (rs.next()) {
            DonorRegistrationRequest request = new DonorRegistrationRequest();
            request.setId(rs.getString("RequestId"));
            request.setFirstName(rs.getString("FirstName"));
            request.setMiddleName(rs.getString("MiddleName"));
            request.setLastName(rs.getString("LastName"));
            request.setDateOfBirth(rs.getString("DateOfBirth"));
            request.setAddress(rs.getString("AddressLine2"));
            request.setCity(rs.getString("City"));
            request.setRequestDate(rs.getString("RequestDate"));
            request.setBloodType(rs.getString("BloodType"));
            request.setState(rs.getString("State"));
            request.setZipCode(rs.getString("ZIP"));
            request.setPhone(rs.getString("Phone"));
            request.setRegistrationApproved(rs.getString(("RegistrationApproved")));
            this.donorRequestDirectory.add(request);
        }

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        throw new RuntimeException("Error fetching donor registration requests: " + e.getMessage());
    }
}

        
    
     public void populateHospitalTable(){
                DefaultTableModel model = (DefaultTableModel) tblDonorRequests.getModel();
        
        model.setRowCount(0);
        
        for (DonorRegistrationRequest hospital  : this.donorRequestDirectory){
            Object[] row = new Object[5];
            row[0] = hospital;
            row[1] = hospital.getAddress();
            row[2] = hospital.getCity();
            row[3] = hospital.getRegistrationApproved();
            row[4] = hospital.getBloodType();
           

            
            model.addRow(row);
        }
    }
     
     
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDonorRequests = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnApproveCase = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnNewCasesOnly = new javax.swing.JButton();

        setBackground(new java.awt.Color(110, 146, 147));
        setMaximumSize(new java.awt.Dimension(1200, 830));
        setMinimumSize(new java.awt.Dimension(1200, 830));

        tblDonorRequests.setBackground(new java.awt.Color(22, 29, 29));
        tblDonorRequests.setForeground(new java.awt.Color(255, 255, 255));
        tblDonorRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DONOR NAME", "DONOR DATE OF BIRTH", "DONOR ZIP CODE", "APPROVAL STATUS", "BLOOD TYPE"
            }
        ));
        tblDonorRequests.setRowHeight(20);
        tblDonorRequests.setSelectionBackground(new java.awt.Color(110, 146, 147));
        jScrollPane1.setViewportView(tblDonorRequests);

        jButton1.setBackground(new java.awt.Color(22, 29, 29));
        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("VIEW CASE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(22, 29, 29));
        jButton2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnApproveCase.setText("APPROVE CASE");
        btnApproveCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveCaseActionPerformed(evt);
            }
        });

        jButton3.setText("REMOVE CASE");

        btnNewCasesOnly.setText("SHOW ONLY NEW CASES");
        btnNewCasesOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCasesOnlyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNewCasesOnly, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnApproveCase))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnApproveCase, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNewCasesOnly, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(241, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = tblDonorRequests.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
        DonorRegistrationRequest rq  = (DonorRegistrationRequest) tblDonorRequests.getValueAt(selectedRowIndex, 0);
 
        

        
        ManageDonorRequestJPanel manageDonorRequestJPanel = new ManageDonorRequestJPanel(userProcessContainer, this.donor, this.user, rq);
        userProcessContainer.add("ManageDonorRequestJPanel", manageDonorRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
                userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnApproveCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveCaseActionPerformed
        // TODO add your handling code here:
//        int selectedRow = tblTransplantList.getSelectedRow();
//        if (selectedRow < 0) {
//            JOptionPane.showMessageDialog(this, "Please select a case to approve.");
//            return;
//        }
//
//        TransplantCase selectedCase = (TransplantCase) tblTransplantList.getValueAt(selectedRow, 0);
//        String patientID = selectedCase.getPatientID();
//
//        try {
//            DatabaseConnection databaseConnection = new DatabaseConnection();
//            Connection connection = databaseConnection.getConnection();
//
//            String updateQuery = "UPDATE transplantPatients SET ApprovalStatus = 'Approved' WHERE PatientID = ?";
//            PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
//            preparedStatement.setString(1, patientID);
//
//            int rowsUpdated = preparedStatement.executeUpdate();
//            if (rowsUpdated > 0) {
//                JOptionPane.showMessageDialog(this, "Case approved successfully!");
//                selectedCase.setApprovalStatus("Approved");
//                populateTransplantCasesTable();
//            } else {
//                JOptionPane.showMessageDialog(this, "Failed to approve the case.");
//            }
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(this, "Error updating approval status: " + e.getMessage());
//        }
//        this.transplantCaseDirectory = new TransplantCaseDirectory();
//        this.populateTransplantCasesTable();
    }//GEN-LAST:event_btnApproveCaseActionPerformed

    private void btnNewCasesOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCasesOnlyActionPerformed
        // TODO add your handling code here:

//        if (btnNewCasesOnly.getText() == "SHOW ALL CASES"){
//            btnNewCasesOnly.setText("SHOW ONLY NEW CASES");
//            t
//            return;
//        }
//
//        this.transplantCaseDirectory = new TransplantCaseDirectory();
//        DefaultTableModel model = (DefaultTableModel) tblTransplantList.getModel();
//        model.setRowCount(0);
//
//        try {
//            DatabaseConnection databaseConnection = new DatabaseConnection();
//            Connection connection = databaseConnection.getConnection();
//            String query = "SELECT * FROM transplantPatients where ApprovalStatus = 'Under Review'";
//            PreparedStatement preparedStatement = connection.prepareStatement(query);
//            ResultSet resultSet = preparedStatement.executeQuery();
//
//            while (resultSet.next()) {
//                TransplantCase transplantCase = new TransplantCase();
//                transplantCase.setPatientID(resultSet.getString("PatientID"));
//                transplantCase.setPatientName(resultSet.getString("PatientName"));
//                transplantCase.setDateOfBirth(resultSet.getDate("DateOfBirth").toString());
//                transplantCase.setScanImage(resultSet.getBytes("ScanImage"));
//                transplantCase.setPatientInfo(resultSet.getString("PatientInfo"));
//                transplantCase.setRequiredTransplant(resultSet.getString("RequiredTransplant"));
//                transplantCase.setApprovalStatus(resultSet.getString("ApprovalStatus"));
//                transplantCaseDirectory.addNewCase(transplantCase);
//            }
//
//            for (TransplantCase transplantCase : transplantCaseDirectory.getTransplantCases()) {
//                Object[] row = new Object[3];
//                row[0] = transplantCase;
//                row[1] = transplantCase.getRequiredTransplant();
//                row[2] = transplantCase.getApprovalStatus();
//                model.insertRow(model.getRowCount(), row);
//            }
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(this, "Error loading transplant cases: " + e.getMessage());
//        }
//
//        btnNewCasesOnly.setText("SHOW ALL CASES");
    }//GEN-LAST:event_btnNewCasesOnlyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproveCase;
    private javax.swing.JButton btnNewCasesOnly;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDonorRequests;
    // End of variables declaration//GEN-END:variables
}
