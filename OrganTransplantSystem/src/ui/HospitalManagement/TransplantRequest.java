/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HospitalManagement;
import java.util.*;
import model.HospitalManagement.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import DatabaseConn.DatabaseConnection;
/**
 *
 * @author pranavb
 */
public class TransplantRequest extends javax.swing.JPanel {

    /**
     * Creates new form TransplantRequest
     */
    TransplantRequest tr;
    DatabaseConnection dbConn = new DatabaseConnection();
    Connection connection = dbConn.getConnection();
    ArrayList<TransplantRequest> TransplantRequestDirectory = new ArrayList<TransplantRequest>();
    public TransplantRequest() {
        initComponents();
        this.populateTransplantTable();
        
    }
    public void populateTransplantTable() {
    String query = "SELECT * FROM transplant";

    try (PreparedStatement preparedStatement = this.connection.prepareStatement(query);
         ResultSet resultSet = preparedStatement.executeQuery()) {

        DefaultTableModel model = (DefaultTableModel) tblTransplant.getModel();

        model.setRowCount(0);

        while (resultSet.next()) {
            String donorID = resultSet.getString("DonorID");
            String recipientID = resultSet.getString("RecipientID");
            String organID = resultSet.getString("OrganID");
            Date transplantDate = resultSet.getDate("TransplantDate");
            String outcome = resultSet.getString("Outcome");
            String legalApproval = resultSet.getString("legalApproval");
            String transportStatus = resultSet.getString("transportStatus");

            model.addRow(new Object[]{
                recipientID, donorID, organID, transplantDate, outcome, legalApproval, transportStatus
            });
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    public void requestUnosApproval() {
    int selectedRow = tblTransplant.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a case to request UNOS approval.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String recipientID = tblTransplant.getValueAt(selectedRow, 0).toString();

    String query = "UPDATE transplant SET UNOS_APPROVAL_REQUEST = 1, UNOS_APPROVAL = 'PENDING' WHERE RecipientID = ?";
    try (PreparedStatement preparedStatement = this.connection.prepareStatement(query)) {
        preparedStatement.setString(1, recipientID);

        int rowsUpdated = preparedStatement.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "UNOS approval requested successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            populateTransplantTable();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to request UNOS approval.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error requesting UNOS approval: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}


    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransplant = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(22, 29, 29));
        setMaximumSize(new java.awt.Dimension(1200, 830));
        setMinimumSize(new java.awt.Dimension(1200, 830));

        tblTransplant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "RecepientID", "DonorID", "OrganID", "Transplant Date", "Legal Approval", "Outcome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTransplant);

        jButton1.setText("VIEW CASE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SET TRANSPLANT DATE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("REQUEST UNOS APPROVAL");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DATE:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1064, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(418, 418, 418))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.requestUnosApproval();
        this.populateTransplantTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setTransplantDate();
        this.populateTransplantTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void setTransplantDate() {
    int selectedRow = tblTransplant.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a case to set the transplant date.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String recipientID = tblTransplant.getValueAt(selectedRow, 0).toString();
    String dateText = txtDate.getText().trim();

    if (dateText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a date.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (!isValidDate(dateText)) {
        JOptionPane.showMessageDialog(this, "Please enter a valid date in the format YYYY-MM-DD.", "Invalid Date Format", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String query = "UPDATE transplant SET TransplantDate = ? WHERE RecipientID = ?";
    try (PreparedStatement preparedStatement = this.connection.prepareStatement(query)) {
        preparedStatement.setDate(1, java.sql.Date.valueOf(dateText));
        preparedStatement.setString(2, recipientID);

        int rowsUpdated = preparedStatement.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Transplant date updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            populateTransplantTable();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update transplant date.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error updating transplant date: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private boolean isValidDate(String dateStr) {
    try {
        java.sql.Date.valueOf(dateStr); // Will throw an exception if the format is invalid
        return true;
    } catch (IllegalArgumentException e) {
        return false;
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTransplant;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables
}
