/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HospitalManagement;
import java.util.*;
import javax.swing.*;
import model.HospitalManagement.*;
import java.sql.*;
import java.io.*;
import java.io.File;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;
import DatabaseConn.DatabaseConnection;

/**
 *
 * @author pranavb
 */
public class ViewDoctorsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddDoctorJPanel
     */
    
    JPanel userProcessContainer;
    HospitalDirectory hospitalDirectory;
    DoctorDirectory doctorDirectory;
    Hospital hospital;
    DatabaseConnection dbcon = new DatabaseConnection();
    Connection connection = dbcon.getConnection();
    public ViewDoctorsJPanel(JPanel userProcessContainer, HospitalDirectory hospitalDirectory, DoctorDirectory doctorDirectory, Hospital hospital) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.hospitalDirectory = hospitalDirectory;
        this.doctorDirectory = doctorDirectory;
        this.hospital = hospital;
        this.populateDoctorTable();
        
    }

    

    public void populateDoctorTable(){

            
            DefaultTableModel model = (DefaultTableModel) tblDoctors.getModel();
        
        model.setRowCount(0);
        
        for (Doctor doctor : this.hospital.getDoctorDirectory().getDoctorDirectory()){
            Object[] row = new Object[3];
            row[0] = doctor;
            row[1] = doctor.getSpecialization().toUpperCase();
            row[2] = doctor.getPhone().toUpperCase();
            model.addRow(row);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctors = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        setBackground(new java.awt.Color(111, 147, 146));
        setMaximumSize(new java.awt.Dimension(1200, 830));
        setMinimumSize(new java.awt.Dimension(1200, 830));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("VIEW DOCTORS");

        tblDoctors.setBackground(new java.awt.Color(22, 29, 29));
        tblDoctors.setForeground(new java.awt.Color(255, 255, 255));
        tblDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Specialization", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoctors.setRowHeight(18);
        tblDoctors.setSelectionBackground(new java.awt.Color(111, 147, 146));
        tblDoctors.setShowHorizontalLines(false);
        jScrollPane1.setViewportView(tblDoctors);
        if (tblDoctors.getColumnModel().getColumnCount() > 0) {
            tblDoctors.getColumnModel().getColumn(0).setResizable(false);
            tblDoctors.getColumnModel().getColumn(1).setResizable(false);
            tblDoctors.getColumnModel().getColumn(2).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(22, 29, 29));
        jButton1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("ADD DOCTOR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(22, 29, 29));
        jButton2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("VIEW");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(22, 29, 29));
        jButton3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(22, 29, 29));
        jButton4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("REFRESH");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(22, 29, 29));
        btnRemove.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("REMOVE DOCTOR");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(201, 201, 201)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(252, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        AddDoctorsJPanel addDoctorsJPanel = new AddDoctorsJPanel(this.userProcessContainer, this.hospitalDirectory, this.doctorDirectory , this.connection , this.hospital, null);
        userProcessContainer.add("AddDoctorsJPanel", addDoctorsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //this.loadDoctors();
        this.populateDoctorTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctors.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
       Doctor doc = (Doctor) tblDoctors.getValueAt(selectedRowIndex, 0);
        
        AddDoctorsJPanel addDoctorsJPanel = new AddDoctorsJPanel(this.userProcessContainer, this.hospitalDirectory, this.doctorDirectory , this.connection , this.hospital, doc);
        userProcessContainer.add("AddDoctorsJPanel", addDoctorsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        this.removeDoctor();
    }//GEN-LAST:event_btnRemoveActionPerformed

        private void loadDoctors(){
        
         try {
                    this.doctorDirectory = new DoctorDirectory();
                   
                    String docquery = "SELECT * FROM doctors"; 
                    PreparedStatement doctstmt = connection.prepareStatement(docquery); 
                    ResultSet docresultSet = doctstmt.executeQuery();
            
                    while(docresultSet.next()){
                        String docid = docresultSet.getString("DoctorID");
                        String docname = docresultSet.getString("Name");
                        String docspecialization = docresultSet.getString("Specialization");
                        String docphone = docresultSet.getString("Phone");
                        String hospitalId = docresultSet.getString("HospitalId");

                        Doctor doctor = new Doctor();
                        doctor.setDoctorId(docid);
                        doctor.setName(docname);
                        doctor.setSpecialization(docspecialization);
                        doctor.setPhone(docphone);
                        doctor.setHospitalId(hospitalId);
                        
                        this.doctorDirectory.addNewDoctor(doctor);
                    }
                    //connection.close();
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching user data1.", "Error", JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    private void removeDoctor() {
    int selectedRowIndex = tblDoctors.getSelectedRow();
    if (selectedRowIndex < 0) {
        JOptionPane.showMessageDialog(null, "Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    Doctor doc = (Doctor) tblDoctors.getValueAt(selectedRowIndex, 0);
    
    this.hospital.getDoctorDirectory().getDoctorDirectory().remove(doc);
    String doctorId = doc.getDoctorId();

    try {
        // Start transaction
        this.connection.setAutoCommit(false);

        // Delete from user table
        String deleteUserSql = "DELETE FROM user WHERE ReferenceID = ?";
        PreparedStatement userStmt = this.connection.prepareStatement(deleteUserSql);
        userStmt.setString(1, doctorId);
        int userRowsAffected = userStmt.executeUpdate();
        userStmt.close();

        if (userRowsAffected > 0) {
            // Delete from doctors table
            String deleteDoctorSql = "DELETE FROM doctors WHERE DoctorID = ?";
            PreparedStatement doctorStmt = this.connection.prepareStatement(deleteDoctorSql);
            doctorStmt.setString(1, doctorId);
            int doctorRowsAffected = doctorStmt.executeUpdate();
            doctorStmt.close();

            if (doctorRowsAffected > 0) {
                // Commit transaction
                this.connection.commit();
                JOptionPane.showMessageDialog(null, "Doctor record removed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Rollback in case of failure
                this.connection.rollback();
                JOptionPane.showMessageDialog(null, "Failed to delete doctor record.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Rollback if user deletion fails
            this.connection.rollback();
            JOptionPane.showMessageDialog(null, "Failed to delete user record.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Reset auto-commit
        this.connection.setAutoCommit(true);

        this.populateDoctorTable();
    } catch (SQLException e) {
        try {
            this.connection.rollback();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDoctors;
    // End of variables declaration//GEN-END:variables
}
