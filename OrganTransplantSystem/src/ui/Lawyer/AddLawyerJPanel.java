/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Lawyer;

import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.UUID;
import model.Lawyer.Lawyer;
import model.Lawyer.LawyerDirectory;

/**
 *
 * @author ivyju
 */
public class AddLawyerJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    LawyerDirectory lawyerDirectory;
    Lawyer lawyer;
    Connection connection;
    
    public AddLawyerJPanel(JPanel userProcessContainer, LawyerDirectory lawyerDirectory, Connection connection) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.lawyerDirectory = lawyerDirectory;
        this.connection = connection;
    }
    

    public void validateFields() {
        // Check if any field is empty
        if (txtHospitalID.getText().isEmpty() ||
            txtLawyerName.getText().isEmpty() ||
            txtPhone.getText().isEmpty() ||
            txtEmail.getText().isEmpty() ||
            txtSpecialization.getText().isEmpty()){

            JOptionPane.showMessageDialog(null, "All fields must be filled.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validate that lawyerName does not contain special characters
        if (!txtLawyerName.getText().matches("[a-zA-Z0-9 ]+")) {
            JOptionPane.showMessageDialog(null, "lawyer name must not contain special characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate that lawyerPhone contains only digits
        if (!txtPhone.getText().matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "lawyer phone must contain only digits.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate adminEmail with a basic regex for email format
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtLawyerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSpecialization = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHospitalID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(22, 29, 29));
        setMaximumSize(new java.awt.Dimension(1200, 830));
        setMinimumSize(new java.awt.Dimension(1200, 830));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ADD LAWYER");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("LAWYER NAME");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("SPECIALIZATION");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("HOSPITAL ID");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("PHONE");

        btnSave.setBackground(new java.awt.Color(111, 147, 146));
        btnSave.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(111, 147, 146));
        btnUpdate.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Email");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(506, 506, 506))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(74, 471, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPhone)
                            .addComponent(txtHospitalID, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(39, 39, 39)
                        .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(39, 39, 39)
                        .addComponent(txtLawyerName, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(438, 438, 438))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLawyerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHospitalID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(81, 81, 81)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        this.validateFields();

        // Gather input values
        String lawyerName = txtLawyerName.getText();
        String lawyerPhone = txtPhone.getText();
        String specialization = txtSpecialization.getText();
        String hospitalID = txtHospitalID.getText();
        String email = txtEmail.getText();
        
        try {
            // Check if lawyer already exists in the user table
            
            String checkUsernameSql = "SELECT Name FROM Lawyers WHERE Name = ?";
            PreparedStatement checkUserStmt = this.connection.prepareStatement(checkUsernameSql);
            checkUserStmt.setString(1, lawyerName);
            
            ResultSet resultSet = checkUserStmt.executeQuery();
            
            boolean checkExists = false;
            
            while (resultSet.next()) {
                
                String existingUsername = resultSet.getString("Name");
                if (existingUsername.equals(lawyerName)) {
                    checkExists = true;}
            }
            
            if (checkExists) {
                JOptionPane.showMessageDialog(null, "Lawyer already exists.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            checkUserStmt.close();

            // Generate IDs
            String lawyerId = UUID.randomUUID().toString();

            // Insert into table
            String lawyerInsertSql = "INSERT INTO Lawyers (LawyerID, Name, Phone, Specialization, HospitalID) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement lawyerStmt = this.connection.prepareStatement(lawyerInsertSql);
            lawyerStmt.setString(1, lawyerId);
            lawyerStmt.setString(2, lawyerName);
            lawyerStmt.setString(3, lawyerPhone);
            lawyerStmt.setString(4, specialization);
            lawyerStmt.setString(5, hospitalID);
            
            int lawyerRowsAffected = lawyerStmt.executeUpdate();
            
            if (lawyerRowsAffected > 0) {
            // Insert into user table for coordinator
                String lawyerUserInsertSql = "INSERT INTO user (username, password, email, Role, ReferenceID) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement lawyerUserStmt = this.connection.prepareStatement(lawyerUserInsertSql);
                lawyerUserStmt.setString(1, lawyerName);
                lawyerUserStmt.setString(2, "lawyer");
                lawyerUserStmt.setString(3, email);
                lawyerUserStmt.setString(4, "6"); // Role ID for coordinator
                lawyerUserStmt.setString(5, lawyerId);

                int lawyerUserRowsAffected = lawyerUserStmt.executeUpdate();

                if (lawyerUserRowsAffected <= 0) {
                    JOptionPane.showMessageDialog(null, "Failed to insert user record for Lawyer.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                lawyerUserStmt.close(); 
            } else {
                JOptionPane.showMessageDialog(null, "Failed to insert Lawyer record.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        this.validateFields();

        // Gather input values
        String lawyerName = txtLawyerName.getText();
        String lawyerPhone = txtPhone.getText();
        String specialization = txtSpecialization.getText();
        String hospitalID = txtHospitalID.getText();
        String email = txtEmail.getText();
        
        try {
            // Check if lawyer already exists in the user table
            
            String checkUsernameSql = "SELECT Name FROM Lawyers WHERE Name = ?";
            PreparedStatement checkUserStmt = this.connection.prepareStatement(checkUsernameSql);
            checkUserStmt.setString(1, lawyerName);
            
            ResultSet resultSet = checkUserStmt.executeQuery();
            
            boolean checkExists = false;
            
            while (resultSet.next()) {
                
                String existingUsername = resultSet.getString("Name");
                if (existingUsername.equals(lawyerName)) {
                    checkExists = true;}
            }
            
            if (checkExists == false) {
                JOptionPane.showMessageDialog(null, "Lawyer doesn't exists. Check the name again.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            checkUserStmt.close();

            // change table
            String lawyerInsertSql = "UPDATE Lawyers SET Phone = ?, Specialization = ?, HospitalID = ? WHERE name = ?";
            PreparedStatement lawyerStmt = this.connection.prepareStatement(lawyerInsertSql);
            lawyerStmt.setString(1, lawyerPhone);
            lawyerStmt.setString(2, specialization);
            lawyerStmt.setString(3, hospitalID);
            lawyerStmt.setString(4, lawyerName);
            
            int lawyerRowsAffected = lawyerStmt.executeUpdate();
            
            if (lawyerRowsAffected > 0) {
            // Insert into user table for coordinator
                String lawyerUserInsertSql = "UPDATE user SET email = ? WHERE username = ?";
                PreparedStatement lawyerUserStmt = this.connection.prepareStatement(lawyerUserInsertSql);
                lawyerUserStmt.setString(1, email);
                lawyerUserStmt.setString(2, lawyerName);

                int lawyerUserRowsAffected = lawyerUserStmt.executeUpdate();

                if (lawyerUserRowsAffected <= 0) {
                    JOptionPane.showMessageDialog(null, "Failed to update user record for Lawyer.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                lawyerUserStmt.close(); 
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update Lawyer record.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHospitalID;
    private javax.swing.JTextField txtLawyerName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSpecialization;
    // End of variables declaration//GEN-END:variables
}
